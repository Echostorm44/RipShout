<Application x:Class="RipShout.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             Startup="OnStartup"
             Exit="OnExit"
             DispatcherUnhandledException="OnDispatcherUnhandledException"
             xmlns:local="clr-namespace:RipShout">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemesDictionary Theme="Dark" />
                <ui:ControlsDictionary />
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="OutlinedText" TargetType="{x:Type ContentControl}">
                <!-- Some Style Setters -->
                <Setter Property="Content" Value="Outlined Text"/>
                <Setter Property="Padding" Value="0"/>
                <!-- Border Brush Must be equal '0' because TextBlock that emulate the stroke will using the BorderBrush as to define 'Stroke' color-->
                <Setter Property="BorderThickness" Value="0"/>
                <!-- Border Brush define 'Stroke' Color-->
                <Setter Property="BorderBrush" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="FontSize" Value="24"/>
                <Setter Property="FontFamily" Value="Seoge UI Bold"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Canvas Width="{Binding ActualWidth, ElementName=FillText}" Height="{Binding ActualHeight, ElementName=FillText}">
                                <Canvas.Resources>
                                    <!-- Style to ease the duplication of Text Blocks that emulate the stroke: Binding to one element (or to template) is the first part of the Trick -->
                                    <Style x:Key="OutlinedTextStrokeTextBlock_Style" TargetType="{x:Type TextBlock}">
                                        <Setter Property="Text" Value="{Binding Text, ElementName=FillText}"/>
                                        <Setter Property="FontSize" Value="{Binding FontSize, ElementName=FillText}"/>
                                        <Setter Property="FontFamily" Value="{Binding FontFamily, ElementName=FillText}"/>
                                        <Setter Property="FontStyle" Value="{Binding FontStyle, ElementName=FillText}"/>
                                        <Setter Property="FontWeight" Value="{Binding FontWeight, ElementName=FillText}"/>
                                        <Setter Property="Padding" Value="{Binding TextAlignment, ElementName=Padding}"/>
                                        <Setter Property="TextAlignment" Value="{Binding TextAlignment, ElementName=FillText}"/>
                                        <Setter Property="VerticalAlignment" Value="{Binding VerticalAlignment, ElementName=FillText}"/>
                                    </Style>
                                </Canvas.Resources>
                                <!-- Offseting the Text block will create the outline, the margin is the Stroke Width-->
                                <TextBlock Foreground="{TemplateBinding BorderBrush}" Margin="-1,0,0,0" Style="{DynamicResource OutlinedTextStrokeTextBlock_Style}"/>
                                <TextBlock Foreground="{TemplateBinding BorderBrush}" Margin="0,-1,0,0" Style="{DynamicResource OutlinedTextStrokeTextBlock_Style}"/>
                                <TextBlock Foreground="{TemplateBinding BorderBrush}" Margin="0,0,-1,0" Style="{DynamicResource OutlinedTextStrokeTextBlock_Style}"/>
                                <TextBlock Foreground="{TemplateBinding BorderBrush}" Margin="0,0,0,-1" Style="{DynamicResource OutlinedTextStrokeTextBlock_Style}"/>
                                <!-- Base TextBlock Will be the Fill -->
                                <TextBlock x:Name="FillText" Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}"
                               FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Padding="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                               TextAlignment="{TemplateBinding HorizontalContentAlignment}"
                               Style="{DynamicResource TbMediaOverlay_Style}"/>
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
